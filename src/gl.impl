#pragma once

const std::string vsh(
"#version 330\n\n"
"layout(location = 0) in vec2 coords;\n\n"
"out vec2 tex_coords;\n\n"
"void main() {\n"
"    tex_coords = 0.5 * vec2(1. + coords.x, 1. - coords.y);\n"
"    gl_Position = vec4(coords, 0.0, 1.0);\n"
"}\n"
);

const std::string fsh(
"#version 330\n\n"
"in vec2 tex_coords;\n\n"
"uniform sampler2D tex;\n\n"
"out vec4 frag_output;\n\n"
"void main() {\n"
"    frag_output = texture(tex, tex_coords);\n"
"}\n"
);

inline GLuint create_shader(int type, const std::string& src) {
    GLuint shader = glCreateShader(type);
    auto src_str = src.c_str();
    glShaderSource(shader, 1, &src_str, NULL);
    glCompileShader(shader);
    return shader;
}

inline void check_shader(GLuint shader) {
    int status;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
    if (status != GL_TRUE) {
        char buffer[512];
        glGetShaderInfoLog(shader, 512, NULL, buffer);
        std::cerr << buffer << '\n';
    }
}

inline void check_program(GLuint program) {
    int status;
    glGetProgramiv(program, GL_LINK_STATUS, &status);
    if (status != GL_TRUE) {
        char buffer[512];
        glGetProgramInfoLog(program, 512, NULL, buffer);
        std::cerr << buffer << '\n';
    }
}

GLuint gen_shaders(const std::string& vertex_source, const std::string& fragment_source) {
    auto vertex_shader = create_shader(GL_VERTEX_SHADER, vertex_source);
    auto fragment_shader = create_shader(GL_FRAGMENT_SHADER, fragment_source);

    check_shader(vertex_shader);
    check_shader(fragment_shader);

    GLuint shader_program = glCreateProgram();
    glAttachShader(shader_program, vertex_shader);
    glAttachShader(shader_program, fragment_shader);
    glLinkProgram(shader_program);

    check_program(shader_program);

    glUseProgram(shader_program);

    glBindFragDataLocation(shader_program, 0, "frag_output");

    glDeleteShader(vertex_shader);
    glDeleteShader(fragment_shader);

    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0);

    return shader_program;
}

void setup_gl() {
    glewExperimental = true;
    glewInit();

    GLuint vbo;
    glGenBuffers(1, &vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);

    const float vertices[] = {
        1.f, 1.f,
        1.f, -1.f,
        -1.f, 1.f,
        -1.f, 1.f,
        1.f, -1.f,
        -1.f, -1.f
    };

    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    GLuint texture;
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_2D, texture);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    gen_shaders(vsh, fsh);
}
