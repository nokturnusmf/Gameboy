#pragma once

long Emulator::execute() {
    if (cpu.halt) {
        return 4;
    }

    byte op = memmap.read(cpu.pc);
    if (op == 0xFF) {
        std::cerr << "ff\n";
        char c; std::cin >> c;
        return 0;
    }

    // std::cout << std::hex << (int)cpu.pc << '\n';

    switch (op) {
    case 0: // nop
        ++cpu.pc;
        return 4;

    case 0x01: // ld bc, imm
        cpu.bc = memmap.read_word(++cpu.pc);
        cpu.pc += 2;
        return 12;

    case 0x02: // ld (bc), a
        memmap.write(cpu.bc, cpu.a);
        ++cpu.pc;
        return 8;

    case 0x03: // inc bc
        cpu.flags = ADDSUB_FLAG | (++cpu.bc ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x04: // inc b
        cpu.flags = ADDSUB_FLAG | (++cpu.b ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x05: // dec b
        cpu.flags = ADDSUB_FLAG | (--cpu.b ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x06: // ld b, imm
        cpu.b = memmap.read((++cpu.pc)++);
        return 8;

    case 0x08: // ld (imm), sp
        memmap.write_word(memmap.read_word(++cpu.pc), cpu.sp);
        cpu.pc += 2;
        return 16;

    case 0x09: // add hl, bc
        cpu.hl += cpu.bc;
        cpu.flags = (cpu.hl < cpu.bc ? CARRY_FLAG : 0) | (cpu.flags & ZERO_FLAG);
        ++cpu.pc;
        return 12;

    case 0x0A: // ld a, (bc)
        cpu.a = memmap.read(cpu.bc);
        ++cpu.pc;
        return 8;

    case 0x0B: // dec bc
        cpu.flags = ADDSUB_FLAG | (--cpu.bc ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x0C: // inc c
        cpu.flags = ADDSUB_FLAG | (++cpu.c ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x0D: // dec c
        cpu.flags = ADDSUB_FLAG | (--cpu.c ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x0E: // ld c, imm
        cpu.c = memmap.read((++cpu.pc)++);
        return 8;

    case 0x10: // stop
        std::cout << "stop\n";
        ++cpu.pc;
        return 0;

    case 0x11: // ld de, imm
        cpu.de = memmap.read_word(++cpu.pc);
        cpu.pc += 2;
        return 12;

    case 0x12: // ld (de), a
        memmap.write(cpu.de, cpu.a);
        ++cpu.pc;
        return 8;

    case 0x13: // inc de
        cpu.flags = ADDSUB_FLAG | (++cpu.de ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x14: // inc d
        cpu.flags = ADDSUB_FLAG | (++cpu.d ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x15: // dec d
        cpu.flags = ADDSUB_FLAG | (--cpu.d ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x16: // ld d, imm
        cpu.d = memmap.read((++cpu.pc)++);
        return 8;

    case 0x18: // jr imm
        cpu.pc += (sbyte)memmap.read((++cpu.pc)++);
        return 12;

    case 0x19: // add hl, de
        cpu.hl += cpu.de;
        cpu.flags = (cpu.hl < cpu.de ? CARRY_FLAG : 0) | (cpu.flags & ZERO_FLAG);
        ++cpu.pc;
        return 12;

    case 0x1A: // ld a, (de)
        cpu.a = memmap.read(cpu.de);
        ++cpu.pc;
        return 8;

    case 0x1B: // dec de
        cpu.flags = ADDSUB_FLAG | (--cpu.de ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x1C: // inc e
        cpu.flags = ADDSUB_FLAG | (++cpu.e ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x1D: // dec e
        cpu.flags = ADDSUB_FLAG | (--cpu.e ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x1E: // ld e, imm
        cpu.e = memmap.read((++cpu.pc)++);
        return 8;

    case 0x20: // jr nz imm
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc += 2;
            return 8;
        } else {
            cpu.pc += (sbyte)memmap.read((++cpu.pc)++);
            return 12;
        }

    case 0x21: // ld hl, imm
        cpu.hl = memmap.read_word(++cpu.pc);
        cpu.pc += 2;
        return 12;

    case 0x22: // ldi (hl), a
        memmap.write(cpu.hl++, cpu.a);
        ++cpu.pc;
        return 8;

    case 0x23: // inc hl
        cpu.flags = ADDSUB_FLAG | (++cpu.hl ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x24: // inc h
        cpu.flags = ADDSUB_FLAG | (++cpu.h ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x25: // dec h
        cpu.flags = ADDSUB_FLAG | (--cpu.h ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x26: // ld h, imm
        cpu.h = memmap.read((++cpu.pc)++);
        return 8;

    case 0x28: // jr z imm
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc += (sbyte)memmap.read((++cpu.pc)++);
            return 12;
        } else {
            cpu.pc += 2;
            return 8;
        }

    case 0x29: // add hl, hl
        cpu.flags = (cpu.hl & 0x8000 ? CARRY_FLAG : 0) | (cpu.flags & ZERO_FLAG);
        cpu.hl <<= 1;
        ++cpu.pc;
        return 12;

    case 0x2A: // ldi a, (hl)
        cpu.a = memmap.read(cpu.hl++);
        ++cpu.pc;
        return 8;

    case 0x2B: // dec hl
        cpu.flags = ADDSUB_FLAG | (--cpu.hl ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x2C: // inc l
        cpu.flags = ADDSUB_FLAG | (++cpu.l ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x2D: // dec l
        cpu.flags = ADDSUB_FLAG | (--cpu.l ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x2E: // ld l, imm
        cpu.l = memmap.read((++cpu.pc)++);
        return 8;

    case 0x2F: // cpl
        cpu.a = ~cpu.a;
        ++cpu.pc;
        return 4;

    case 0x30: // jr nc imm
        if (cpu.flags & CARRY_FLAG) {
            cpu.pc += 2;
            return 8;
        } else {
            cpu.pc += (sbyte)memmap.read((++cpu.pc)++);
            return 12;
        }

    case 0x31: // ld sp, imm
        cpu.sp = memmap.read_word(++cpu.pc);
        cpu.pc += 2;
        return 12;

    case 0x32: // ldd (hl), a
        memmap.write(cpu.hl--, cpu.a);
        ++cpu.pc;
        return 8;

    case 0x33: // inc sp
        cpu.flags = ADDSUB_FLAG | (++cpu.sp ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x34: // inc (hl)
        memmap.write(cpu.hl, memmap.read(cpu.hl) + 1);
        ++cpu.pc;
        return 12;

    case 0x35: // dec (hl)
        memmap.write(cpu.hl, memmap.read(cpu.hl) - 1);
        ++cpu.pc;
        return 12;

    case 0x36: // ld (hl), imm
        memmap.write(cpu.hl, memmap.read((++cpu.pc)++));
        return 12;

    case 0x39: // add hl, sp
        cpu.hl += cpu.sp;
        cpu.flags = (cpu.hl < cpu.sp ? CARRY_FLAG : 0) | (cpu.flags & ZERO_FLAG);
        ++cpu.pc;
        return 12;

    case 0x3A: // ldd a, (hl)
        cpu.a = memmap.read(cpu.hl--);
        ++cpu.pc;
        return 8;

    case 0x3B: // dec sp
        cpu.flags = ADDSUB_FLAG | (--cpu.sp ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 8;

    case 0x3C: // inc a
        cpu.flags = ADDSUB_FLAG | (++cpu.a ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x3D: // dec a
        cpu.flags = ADDSUB_FLAG | (--cpu.a ? 0 : ZERO_FLAG) | (cpu.flags & CARRY_FLAG);
        ++cpu.pc;
        return 4;

    case 0x3E: // ld a, imm
        cpu.a = memmap.read((++cpu.pc)++);
        return 8;

    case 0x3F: // ccf
        cpu.flags ^= CARRY_FLAG;
        ++cpu.pc;
        return 4;

    case 0x40: // ld b, b
        ++cpu.pc;
        return 4;

    case 0x41: // ld b, c
        cpu.b = cpu.c;
        ++cpu.pc;
        return 4;

    case 0x42: // ld b, d
        cpu.b = cpu.d;
        ++cpu.pc;
        return 4;

    case 0x43: // ld b, e
        cpu.b = cpu.e;
        ++cpu.pc;
        return 4;

    case 0x44: // ld b, h
        cpu.b = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x45: // ld b, l
        cpu.b = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x46: // ld b, (hl)
        cpu.b = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x47: // ld b, a
        cpu.b = cpu.a;
        ++cpu.pc;
        return 4;

    case 0x48: // ld c, b
        cpu.c = cpu.b;
        ++cpu.pc;
        return 4;

    case 0x49: // ld c, c
        ++cpu.pc;
        return 4;

    case 0x4A: // ld c, d
        cpu.c = cpu.d;
        ++cpu.pc;
        return 4;

    case 0x4B: // ld c, e
        cpu.c = cpu.e;
        ++cpu.pc;
        return 4;

    case 0x4C: // ld c, h
        cpu.c = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x4D: // ld c, l
        cpu.c = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x4E: // ld c, (hl)
        cpu.c = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x4F: // ld c, a
        cpu.c = cpu.a;
        ++cpu.pc;
        return 4;

    case 0x50: // ld d, b
        cpu.d = cpu.b;
        ++cpu.pc;
        return 4;

    case 0x51: // ld d, c
        cpu.d = cpu.c;
        ++cpu.pc;
        return 4;

    case 0x52: // ld d, d
        ++cpu.pc;
        return 4;

    case 0x53: // ld d, e
        cpu.d = cpu.e;
        ++cpu.pc;
        return 4;

    case 0x54: // ld d, h
        cpu.d = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x55: // ld d, l
        cpu.d = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x56: // ld d, (hl)
        cpu.d = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x57: // ld d, a
        cpu.d = cpu.a;
        ++cpu.pc;
        return 4;

    case 0x58: // ld e, b
        cpu.e = cpu.b;
        ++cpu.pc;
        return 4;

    case 0x59: // ld e, c
        cpu.e = cpu.c;
        ++cpu.pc;
        return 4;

    case 0x5A: // ld e, d
        cpu.e = cpu.d;
        ++cpu.pc;
        return 4;

    case 0x5B: // ld e, e
        ++cpu.pc;
        return 4;

    case 0x5C: // ld e, h
        cpu.e = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x5D: // ld e, l
        cpu.e = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x5E: // ld e, (hl)
        cpu.e = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x5F: // ld e, a
        cpu.e = cpu.a;
        ++cpu.pc;
        return 4;

    case 0x60: // ld h, b
        cpu.h = cpu.b;
        ++cpu.pc;
        return 4;

    case 0x61: // ld h, c
        cpu.h = cpu.c;
        ++cpu.pc;
        return 4;

    case 0x62: // ld h, d
        cpu.h = cpu.d;
        ++cpu.pc;
        return 4;

    case 0x63: // ld h, e
        cpu.h = cpu.e;
        ++cpu.pc;
        return 4;

    case 0x64: // ld h, h
        cpu.h = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x65: // ld h, l
        cpu.h = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x66: // ld h, (hl)
        cpu.h = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x67: // ld h, a
        cpu.h = cpu.a;
        ++cpu.pc;
        return 4;

    case 0x68: // ld l, b
        cpu.l = cpu.b;
        ++cpu.pc;
        return 4;

    case 0x69: // ld l, c
        cpu.l = cpu.c;
        ++cpu.pc;
        return 4;

    case 0x6A: // ld l, d
        cpu.l = cpu.d;
        ++cpu.pc;
        return 4;

    case 0x6B: // ld l, e
        cpu.l = cpu.e;
        ++cpu.pc;
        return 4;

    case 0x6C: // ld l, h
        cpu.l = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x6D: // ld l, l
        cpu.l = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x6E: // ld l, (hl)
        cpu.l = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x6F: // ld l, a
        cpu.l = cpu.a;
        ++cpu.pc;
        return 4;

    case 0x70: // ld (hl), b
        memmap.write(cpu.hl, cpu.b);
        ++cpu.pc;
        return 8;

    case 0x71: // ld (hl), c
        memmap.write(cpu.hl, cpu.c);
        ++cpu.pc;
        return 8;

    case 0x72: // ld (hl), d
        memmap.write(cpu.hl, cpu.d);
        ++cpu.pc;
        return 8;

    case 0x73: // ld (hl), e
        memmap.write(cpu.hl, cpu.e);
        ++cpu.pc;
        return 8;

    case 0x74: // ld (hl), h
        memmap.write(cpu.hl, cpu.h);
        ++cpu.pc;
        return 8;

    case 0x75: // ld (hl), l
        memmap.write(cpu.hl, cpu.l);
        ++cpu.pc;
        return 8;

    case 0x76: // hlt
        cpu.halt = true;
        ++cpu.pc;
        return 0;

    case 0x77: // ld (hl), a
        memmap.write(cpu.hl, cpu.a);
        ++cpu.pc;
        return 8;

    case 0x78: // ld a, b
        cpu.a = cpu.b;
        ++cpu.pc;
        return 4;

    case 0x79: // ld a, c
        cpu.a = cpu.c;
        ++cpu.pc;
        return 4;

    case 0x7A: // ld a, d
        cpu.a = cpu.d;
        ++cpu.pc;
        return 4;

    case 0x7B: // ld a, e
        cpu.a = cpu.e;
        ++cpu.pc;
        return 4;

    case 0x7C: // ld a, h
        cpu.a = cpu.h;
        ++cpu.pc;
        return 4;

    case 0x7D: // ld a, l
        cpu.a = cpu.l;
        ++cpu.pc;
        return 4;

    case 0x7E: // ld a, (hl)
        cpu.a = memmap.read(cpu.hl);
        ++cpu.pc;
        return 8;

    case 0x7F: // ld a, a
        ++cpu.pc;
        return 4;

    case 0x80: // add a, b
        cpu.a += cpu.b;
        cpu.flags = (cpu.a < cpu.b ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x81: // add a, c
        cpu.a += cpu.c;
        cpu.flags = (cpu.a < cpu.c ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x82: // add a, d
        cpu.a += cpu.d;
        cpu.flags = (cpu.a < cpu.d ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x83: // add a, e
        cpu.a += cpu.e;
        cpu.flags = (cpu.a < cpu.e ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x84: // add a, h
        cpu.a += cpu.h;
        cpu.flags = (cpu.a < cpu.h ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x85: // add a, l
        cpu.a += cpu.l;
        cpu.flags = (cpu.a < cpu.l ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x86: { // add a, (hl)
        byte b = memmap.read(cpu.hl);
        cpu.a += b;
        cpu.flags = (cpu.a < b ? CARRY_FLAG : 0) | (cpu.flags ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 8;
    }

    case 0x87: // add a, a
        cpu.flags = (cpu.a & 0x80 ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        cpu.a <<= 1;
        ++cpu.pc;
        return 4;

    case 0x88: // adc a, b
        cpu.a += cpu.b + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.b ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x89: // adc a, c
        cpu.a += cpu.c + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.c ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x8A: // adc a, d
        cpu.a += cpu.d + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.d ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x8B: // adc a, e
        cpu.a += cpu.e + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.e ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x8C: // adc a, h
        cpu.a += cpu.h + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.h ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x8D: // adc a, l
        cpu.a += cpu.l + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.l ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0x8E: { // adc a, (hl)
        byte b = memmap.read(cpu.hl);
        cpu.a += b + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < b ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 8;
    }

    case 0x8F: { // adc a, a
        bool b = cpu.a & 0x80;
        cpu.a <<= 1;
        cpu.a += (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (b ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;
    }

    case 0x90: // sub b
        cpu.a -= cpu.b;
        cpu.flags = (cpu.a < cpu.b ? CARRY_FLAG : 0) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x91: // sub c
        cpu.a -= cpu.c;
        cpu.flags = (cpu.a < cpu.c ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x92: // sub d
        cpu.a -= cpu.d;
        cpu.flags = (cpu.a < cpu.d ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x93: // sub e
        cpu.a -= cpu.e;
        cpu.flags = (cpu.a < cpu.e ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x94: // sub h
        cpu.a -= cpu.h;
        cpu.flags = (cpu.a < cpu.h ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x95: // sub l
        cpu.a -= cpu.l;
        cpu.flags = (cpu.a < cpu.l ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x96: { // sub (hl)
        byte b = memmap.read(cpu.hl);
        cpu.a -= b;
        cpu.flags = (cpu.a < b ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 8;
    }

    case 0x97: // sub a
        cpu.a = 0;
        cpu.flags = ZERO_FLAG | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x98: // sbc a, b
        cpu.a -= cpu.b + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.b ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x99: // sbc a, c
        cpu.a -= cpu.c + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.c ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x9A: // sbc a, d
        cpu.a -= cpu.d + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.d ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x9B: // sbc a, e
        cpu.a -= cpu.e + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.e ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x9C: // sbc a, h
        cpu.a -= cpu.h + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.h ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x9D: // sbc a, l
        cpu.a -= cpu.l + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < cpu.l ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0x9E: { // sbc a, (hl)
        byte b = memmap.read(cpu.hl);
        cpu.a -= b + (bool)(cpu.flags & CARRY_FLAG);
        cpu.flags = (cpu.a < b ? 0 : CARRY_FLAG) | (cpu.a ? 0 : ZERO_FLAG) | ADDSUB_FLAG;
        ++cpu.pc;
        return 8;
    }

    case 0x9F: // sbc a, a
        cpu.a = cpu.flags & CARRY_FLAG ? -1 : 0;
        cpu.flags = ADDSUB_FLAG | cpu.a ? 0 : ZERO_FLAG | CARRY_FLAG | ADDSUB_FLAG;
        ++cpu.pc;
        return 4;

    case 0xA0: // and b
        cpu.a &= cpu.b;
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA1: // and c
        cpu.a &= cpu.c;
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA2: // and d
        cpu.a |= cpu.d;
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA3: // and e
        cpu.a &= cpu.e;
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA4: // and h
        cpu.a &= cpu.h;
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA5: // and l
        cpu.a &= cpu.l;
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA6: // and (hl)
        cpu.a &= memmap.read(cpu.hl);
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 8;

    case 0xA7: // and a
        cpu.flags = HALFCARRY_FLAG | (cpu.a ? 0 : ZERO_FLAG);
        ++cpu.pc;
        return 4;

    case 0xA8: // xor b
        cpu.a ^= cpu.b;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xA9: // xor c
        cpu.a ^= cpu.c;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xAA: // xor d
        cpu.a ^= cpu.d;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xAB: // or e
        cpu.a |= cpu.e;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xAC: // xor h
        cpu.a ^= cpu.h;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xAD: // xor l
        cpu.a ^= cpu.l;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xAE: // xor (hl)
        cpu.a ^= memmap.read(cpu.hl);
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 8;

    case 0xAF: // xor a
        cpu.a = 0;
        cpu.flags = ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB0: // or b
        cpu.a |= cpu.b;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB1: // or c
        cpu.a |= cpu.c;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB2: // or d
        cpu.a |= cpu.d;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB3: // or e
        cpu.a |= cpu.e;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB4: // or h
        cpu.a |= cpu.h;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB5: // or l
        cpu.a |= cpu.l;
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xB6: // or (hl)
        cpu.a |= memmap.read(cpu.hl);
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 8;

    case 0xB7: // or a
        cpu.flags = cpu.a ? 0 : ZERO_FLAG;
        ++cpu.pc;
        return 4;

    case 0xC0: // ret nz
        if (cpu.flags & ZERO_FLAG) {
            ++cpu.pc;
            return 8;
        } else {
            cpu.pc = memmap.read_word((++cpu.sp)++);
            return 12;
        }

    case 0xC1: // pop bc
        cpu.bc = memmap.read((++cpu.sp)++);
        ++cpu.pc;
        return 12;

    case 0xC2: // jp nz imm
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc += 3;
        } else {
            cpu.pc = memmap.read_word(cpu.pc + 1);
        }
        return 12;

    case 0xC3: // jmp imm
        cpu.pc = memmap.read_word(cpu.pc + 1);
        return 16;

    case 0xC4: // call nz imm
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc += 3;
            return 12;
        } else {
            cpu.pc = memmap.read_word(cpu.pc + 1);
            return 20;
        }

    case 0xC5: // push bc
        memmap.write((--cpu.sp)--, cpu.bc);
        ++cpu.pc;
        return 12;

    case 0xC7: // rst 0x00
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x00;
        return 16;

    case 0xC8: // ret z
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc = memmap.read_word((++cpu.sp)++);
            return 12;
        } else {
            ++cpu.pc;
            return 8;
        }

    case 0xC9: // ret
        cpu.pc = memmap.read_word((++cpu.sp)++);
        return 16;

    case 0xCA: // jp z imm
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc = memmap.read_word(cpu.pc + 1);
        } else {
            cpu.pc += 3;
        }
        return 12;

    case 0xCB: // bits
        return execute_bits();

    case 0xCC: // call z imm
        if (cpu.flags & ZERO_FLAG) {
            cpu.pc = memmap.read_word(cpu.pc + 1);
            return 20;
        } else {
            cpu.pc += 3;
            return 12;
        }

    case 0xCD: // call imm
        memmap.write_word((--cpu.sp)--, cpu.pc + 3);
        cpu.pc = memmap.read_word(cpu.pc + 1);
        return 24;

    case 0xCF: // rst 0x08
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x08;
        return 16;

    case 0xD0: // ret nc
        if (cpu.flags & CARRY_FLAG) {
            ++cpu.pc;
            return 8;
        } else {
            cpu.pc = memmap.read_word((++cpu.sp)++);
            return 12;
        }

    case 0xD1: // pop de
        cpu.de = memmap.read((++cpu.sp)++);
        ++cpu.pc;
        return 12;

    case 0xD2: // jp nc imm
        if (cpu.flags & CARRY_FLAG) {
            cpu.pc += 3;
        } else {
            cpu.pc = memmap.read_word(cpu.pc + 1);
        }
        return 12;

    case 0xD3: // -
        std::cerr << "undefined opcode D3\n";
        while (1) { char c; std::cin >> c; }

    case 0xD4: // call nc imm
        if (cpu.flags & CARRY_FLAG) {
            cpu.pc += 3;
            return 12;
        } else {
            cpu.pc = memmap.read_word(cpu.pc + 1);
            return 20;
        }

    case 0xD5: // push de
        memmap.write((--cpu.sp)--, cpu.de);
        ++cpu.pc;
        return 12;

    case 0xDB: // -
        std::cerr << "undefined opcode DB\n";
        while (1) { char c; std::cin >> c; }

    case 0xDD: // -
        std::cerr << "undefined opcode DD\n";
        while (1) { char c; std::cin >> c; }

    case 0xDF: // rst 0x18
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x18;
        return 16;

    case 0xD7: // rst 0x10
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x10;
        return 16;

    case 0xD8: // ret c
        if (cpu.flags & CARRY_FLAG) {
            cpu.pc = memmap.read_word((++cpu.sp)++);
            return 12;
        } else {
            ++cpu.pc;
            return 8;
        }

    case 0xD9: // reti
        cpu.pc = memmap.read_word((++cpu.sp)++);
        interrupts.ime = true;
        return 16;

    case 0xDA: // jp c imm
        if (cpu.flags & CARRY_FLAG) {
            cpu.pc = memmap.read_word(cpu.pc + 1);
        } else {
            cpu.pc += 3;
        }
        return 12;

    case 0xDC: // call c imm
        if (cpu.flags & CARRY_FLAG) {
            cpu.pc = memmap.read_word(cpu.pc + 1);
            return 20;
        } else {
            cpu.pc += 3;
            return 12;
        }

    case 0xE0: // ld io[imm], a
        memmap.write(0xFF00 + memmap.read((++cpu.pc)++), cpu.a);
        return 12;

    case 0xE1: // pop hl
        cpu.hl = memmap.read((++cpu.sp)++);
        ++cpu.pc;
        return 12;

    case 0xE2: // ld io[c], a
        memmap.write(0xFF00 + cpu.c, cpu.a);
        ++cpu.pc;
        return 8;

    case 0xE3: // -
        std::cerr << "undefined opcode E3\n";
        while (1) { char c; std::cin >> c; }

    case 0xE4: // -
        std::cerr << "undefined opcode E4\n";
        while (1) { char c; std::cin >> c; }

    case 0xE5: // push hl
        memmap.write((--cpu.sp)--, cpu.hl);
        ++cpu.pc;
        return 12;

    case 0xE6: // and a, imm
        cpu.a &= memmap.read((++cpu.pc)++);
        return 8;

    case 0xE7: // rst 0x20
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x20;
        return 16;

    case 0xE8: // add sp, imm
        cpu.sp += (sbyte)memmap.read((++cpu.pc)++);
        return 16;

    case 0xE9: // jp hl
        cpu.pc = cpu.hl;
        return 4;

    case 0xEA: // ld (imm), a
        memmap.write(memmap.read_word(++cpu.pc), cpu.a);
        cpu.pc += 2;
        return 16;

    case 0xEB: // -
        std::cerr << "undefined opcode EB\n";
        while (1) { char c; std::cin >> c; }

    case 0xEC: // -
        std::cerr << "undefined opcode EC\n";
        while (1) { char c; std::cin >> c; }

    case 0xED: // -
        std::cerr << "undefined opcode ED\n";
        while (1) { char c; std::cin >> c; }

    case 0xEF: // rst 0x28
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x28;
        return 16;

    case 0xF0: // ld a, io[imm]
        cpu.a = memmap.read(0xFF00 + memmap.read((++cpu.pc)++));
        return 12;

    case 0xF1: // pop af
        cpu.af = memmap.read((++cpu.sp)++);
        ++cpu.pc;
        return 12;

    case 0xF2: // ld a, io[c]
        cpu.a = memmap.read(0xFF00 + cpu.c);
        ++cpu.pc;
        return 8;

    case 0xF3: // di
        interrupts.ime = false;
        ++cpu.pc;
        return 4;

    case 0xF4: // -
        std::cerr << "undefined opcode F4\n";
        while (1) { char c; std::cin >> c; }

    case 0xF5: // push af
        memmap.write((--cpu.sp)--, cpu.af);
        ++cpu.pc;
        return 12;

    case 0xF7: // rst 0x30
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x30;
        return 16;

    case 0xF8: // ld hl, sp[imm]
        cpu.hl = memmap.read_word(cpu.sp + (sbyte)memmap.read((++cpu.pc)++));
        return 12;

    case 0xF9: // ld sp, hl
        cpu.sp = cpu.hl;
        ++cpu.pc;
        return 8;

    case 0xFA: // ld a, (imm)
        cpu.a = memmap.read(memmap.read_word(++cpu.pc));
        cpu.pc += 2;
        return 16;

    case 0xFB: // ei
        interrupts.ime = true;
        ++cpu.pc;
        return 4;

    case 0xFC: // -
        std::cerr << "undefined opcode FC\n";
        while (1) { char c; std::cin >> c; }

    case 0xFD: // -
        std::cerr << "undefined opcode FD\n";
        while (1) { char c; std::cin >> c; }

    case 0xFE: { // cmp a, imm
        byte b = memmap.read((++cpu.pc)++);
        if (cpu.a == b) {
            cpu.flags = ZERO_FLAG;
        } else if (cpu.a > b) {
            cpu.flags = CARRY_FLAG;
        }
        cpu.flags |= ADDSUB_FLAG;
        // TODO HALFCARRY_FLAG
        return 8;
    }

    case 0xFF: // rst 0x38
        memmap.write_word((--cpu.sp)--, cpu.pc + 1);
        cpu.pc = 0x38;
        return 16;

    default:
        std::cerr << "unimplemented " << std::hex << (int)op << '\n';
        { char c; std::cin >> c; }
        ++cpu.pc;
        return 4;
    }
}
